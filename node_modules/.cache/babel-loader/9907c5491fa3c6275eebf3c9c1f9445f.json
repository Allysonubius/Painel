{"remainingRequest":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\src\\components\\NearbyCasesFinder.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\src\\components\\NearbyCasesFinder.vue","mtime":1590605624630},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["NearbyCasesFinder.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <div style=\"display: flex;align-items: center;margin-bottom: 20px; \">\r\n\r\n            <button type=\"button\" class=\"btn btn-secondary btn-lg circle\" @click=\"locateUserGPS\">\r\n                <div style=\"margin-top: -2px;\"><LocateIcon/></div>\r\n            </button>\r\n\r\n            <div  style=\"margin: 0 20px;width: 100%;\">\r\n                <input v-if=\"currentCountry==='UK'\" class=\"form-control\" id=\"postcode\" placeholder=\"UK Postcode\" v-model=\"inputValue\">\r\n                <vSelect v-else-if=\"mainLocation\" class=\"select\" :clearable=\"false\" :value=\"usDropdownValue\" :options=\"mainLocation\" label=\"Combined_Key\"\r\n                         @input=\"findUSCounty\" placeholder=\"Search...\"></vSelect>\r\n                <div v-else style=\"text-align: center\">Loading...</div>\r\n            </div>\r\n\r\n            <button type=\"submit\" class=\"btn btn-primary\" style=\"width: 100px;\" @click=\"findUKPostcode\">{{$t('nearBy.search')}}</button>\r\n\r\n        </div>\r\n        <div v-if=\"displayInfo===$t('nearBy.locating')\" style=\"margin: 5px;text-align: center;\">\r\n            <div class=\"spinner-border text-primary\" style=\"width: 2rem; height: 2rem;\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"displayInfo\" style=\"text-align: center;\" v-html=\"displayInfo\"></div>\r\n\r\n        <div v-if=\"isResult\" style=\"text-align: center;margin-top: 20px; color: silver;\">\r\n            <a href=\"javascript: void(0)\" v-if=\"currentCountry==='US'\" @click=\"switchStateCounty\">{{$t('nearBy.switchCountyState')}}<br></a>\r\n            <a href=\"#regionData\">{{$t('nearBy.goToRegional')}}</a>\r\n            <div v-if=\"$i18n.locale !== 'zh'\">\r\n                <hr>\r\n                <ShareIcons style=\"margin-top: 20px;\" :title=\"displayInfo\"></ShareIcons>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    import LocateIcon from 'mdi-vue/NearMe'\r\n    import ShareIcons from \"./ShareIcons.vue\";\r\n    import vSelect from 'vue-select'\r\n    const getGetOrdinal = function(n) {\r\n        //ref https://community.shopify.com/c/Shopify-Design/Ordinal-Number-in-javascript-1st-2nd-3rd-4th/td-p/72156\r\n        const s=[\"th\",\"st\",\"nd\",\"rd\"],\r\n            v=n%100;\r\n        return n+(s[(v-20)%10]||s[v]||s[0]);\r\n    };\r\n\r\n    export default {\r\n        name: \"NearbyCasesFinder\",\r\n        props: [\"regionData\", \"currentCountry\"],\r\n        components:{\r\n            LocateIcon,\r\n            ShareIcons,\r\n            vSelect\r\n        },\r\n        data: function(){\r\n            return {\r\n                inputValue: \"\",\r\n                displayInfo: \"<div style='opacity: 0.7; font-size: 14px;'>\" + (this.currentCountry===\"UK\"?this.$t('nearBy.ukDefault'):this.$t('nearBy.usDefault')) +\"</div>\",\r\n                mainLocation: null,\r\n                statesLocation: null,\r\n                usInfo: {\r\n                    county: null,\r\n                    state: null\r\n                },\r\n                isResult: false,\r\n                usDropdownValue: null\r\n            }\r\n        },\r\n        methods:{\r\n            findUKPostcode(){\r\n                this.isResult = false;\r\n                window.ga('send', 'event', \"nearby\", \"postcode\", this.inputValue);\r\n                fetch(\"https://api.postcodes.io/postcodes/\"+this.inputValue).then( async (res) => {\r\n                    let data = await res.json();\r\n                    console.log(data);\r\n\r\n                    if(data.status == 200){\r\n                        this.findByUKRegionName(data.result.nhs_ha, data.result.admin_district)\r\n\r\n                    }else {\r\n                        window.ga('send', 'event', \"nearby\", \"uk-postcode-notfound\", this.inputValue);\r\n                        this.displayInfo = this.$t('nearBy.postcodeErr')\r\n                    }\r\n                })\r\n            },\r\n            findByUKRegionName(regionName, district){\r\n                let res = this.regionData.filter(obj => obj.location == regionName || obj.location == district);\r\n                if(res && res[0]) {\r\n                    let location = res[0];\r\n                    let index = this.regionData.findIndex(obj=> obj.id === location.id);\r\n                    this.displayInfo = this.$t('nearBy.ukResult', [location.location, location.number, location.change, getGetOrdinal(index)])\r\n                    window.ga('send', 'event', \"nearby\", \"uk-region-found\", location.location+\", \"+regionName + \", \"+ district);\r\n                    this.isResult = true;\r\n                }else {\r\n                    this.displayInfo = this.$t('nearBy.notFound', [regionName]);\r\n                    window.ga('send', 'event', \"nearby\", \"uk-region-notfound\", regionName + \", \"+ district);\r\n                }\r\n            },\r\n            locateUserGPS(){\r\n                this.isResult = false;\r\n                window.ga('send', 'event', \"nearby\", \"start-locating\", \"\");\r\n                if (navigator.geolocation) {\r\n                    this.displayInfo = this.$t('nearBy.locating');\r\n                    navigator.geolocation.getCurrentPosition(async (position)=>{\r\n                        window.ga('send', 'event', \"nearby\", \"location-found\", \"\");\r\n                        if(this.currentCountry === \"UK\"){\r\n                            this.getUKPostcodeUsingLocation(position);\r\n                        }else {\r\n                            await this.getUSLocationData();\r\n                            this.calculateDistanceFromLocation(position);\r\n                        }\r\n                    },()=>{\r\n                        window.ga('send', 'event', \"nearby\", \"location-rejected\", \"\");\r\n                        this.displayInfo = this.$t('nearBy.rejected');\r\n                    });\r\n                } else {\r\n                    window.ga('send', 'event', \"nearby\", \"location-unsupported\", \"\");\r\n                    this.displayInfo = this.$t('nearBy.unsupported');\r\n                }\r\n\r\n            },\r\n            getUKPostcodeUsingLocation(position){\r\n                let requestUrl = `https://api.postcodes.io/postcodes?lon=${position.coords.longitude}&lat=${position.coords.latitude}`;\r\n                fetch(requestUrl).then( async res=>{\r\n                    window.ga('send', 'event', \"nearby\", \"location-found\", requestUrl);\r\n                    let data = await res.json();\r\n                    if(data.result && data.result[0]){\r\n                        this.inputValue = data.result[0].postcode;\r\n                        window.ga('send', 'event', \"nearby\", \"uk-postcode-found\", this.inputValue );\r\n                        this.findUKPostcode()\r\n                    }else {\r\n                        window.ga('send', 'event', \"nearby\", \"location-invalid\", requestUrl);\r\n                        this.displayInfo = this.$t('nearBy.notUk');\r\n                    }\r\n                })\r\n            },\r\n            async getUSLocationData(){\r\n                return new Promise((resolve => {\r\n                    if(this.mainLocation) {\r\n                        resolve(this.mainLocation);\r\n                        return;\r\n                    }\r\n                    fetch(`https://henryz.cc/projects/covid/api_current.php`).then( async res=>{\r\n                        let data = await res.json();\r\n                        const csv=require('csvtojson');\r\n                        let json = await csv().fromString(data.global);\r\n                        let usStates = await csv().fromString(data.us);\r\n                        console.log(json, usStates);\r\n                        this.mainLocation = json.filter(ele=>ele.Country_Region===\"US\");\r\n                        this.statesLocation = usStates.sort((a, b) => b.Active - a.Active);\r\n                        resolve(json);\r\n                    })\r\n                }))\r\n            },\r\n            calculateDistanceFromLocation(position){\r\n                const calculateDist = (lat1, lon1, lat2, lon2) => {\r\n                    let p = 0.017453292519943295;    // Math.PI / 180\r\n                    let c = Math.cos;\r\n                    let a = 0.5 - c((lat2 - lat1) * p)/2 +\r\n                        c(lat1 * p) * c(lat2 * p) *\r\n                        (1 - c((lon2 - lon1) * p))/2;\r\n\r\n                    return 12742 * Math.asin(Math.sqrt(a)); // 2 * R; R = 6371 km\r\n                };\r\n\r\n                const getClosest = (inputList)=>{\r\n                    let list = inputList.sort((a, b) => b.Active - a.Active);\r\n                    let min = {distance: Infinity};\r\n                    for(let region of list){\r\n                        region.distance = calculateDist(region[\"Lat\"],region[\"Long_\"],position.coords.latitude, position.coords.longitude);\r\n                        if(region.distance < min.distance){\r\n                            min = region;\r\n                        }\r\n                    }\r\n                    min.idx = list.findIndex(ele=>ele===min) + 1;\r\n                    console.log(list,min);\r\n\r\n                    if(min.Testing_Rate){\r\n                        let tRateList = list.sort((a, b) => b.Testing_Rate - a.Testing_Rate);\r\n                        min.tRateRank = tRateList.findIndex(ele=>ele.UID===min.UID) + 1;\r\n                    }\r\n                    return min;\r\n                };\r\n\r\n                let usCounties = this.mainLocation;\r\n                let cmin = getClosest(usCounties); // county min\r\n                let smin = getClosest(this.statesLocation); // state min\r\n\r\n                if(cmin.distance> 500){\r\n                    this.displayInfo = this.$t('nearBy.notUs');\r\n                    window.ga('send', 'event', \"nearby\", \"not-us\", cmin.Combined_Key+ \" - \" +cmin.distance);\r\n                    return;\r\n                }\r\n\r\n                window.ga('send', 'event', \"nearby\", \"us-county-found\", cmin.Combined_Key);\r\n\r\n                this.usDropdownValue = cmin.Combined_Key;\r\n\r\n                this.usInfo.county = this.$t('nearBy.usResult',\r\n                    [cmin.Combined_Key, cmin.Active, cmin.Confirmed, cmin.Deaths, (cmin.Deaths/cmin.Confirmed*100).toFixed(2),\r\n                        cmin.Recovered!=0?cmin.Recovered:\"-\", cmin.Recovered!=0?(cmin.Recovered/cmin.Confirmed*100).toFixed(2):\"-\", getGetOrdinal(cmin.idx)])\r\n                this.usInfo.state = this.$t('nearBy.usStateResult',\r\n                    [smin.Province_State, smin.People_Tested, (Number(smin.Testing_Rate)/1000).toFixed(2), smin.Confirmed, smin.People_Hospitalized?smin.People_Hospitalized:\"-\",\r\n                        Number(smin.Hospitalization_Rate).toFixed(2), smin.Deaths, Number(smin.Mortality_Rate).toFixed(2), smin.Recovered?smin.Recovered:\"-\", Number(smin.Active).toFixed(0), getGetOrdinal(smin.idx),\r\n                        getGetOrdinal(smin.tRateRank) ])\r\n\r\n                this.displayInfo = this.usInfo.county;\r\n                this.isResult = true;\r\n            },\r\n            findUSCounty(e){\r\n                window.ga('send', 'event', \"nearby\", \"us-county-dropdown\", e.Combined_Key);\r\n                this.usDropdownValue = e;\r\n                let postition = {\r\n                    coords:{\r\n                        latitude: e[\"Lat\"],\r\n                        longitude: e[\"Long_\"]\r\n                    }\r\n                };\r\n                this.calculateDistanceFromLocation(postition);\r\n            },\r\n            switchStateCounty(){\r\n                window.ga('send', 'event', \"nearby\", \"us-county-state-switched\", '');\r\n                if(this.displayInfo == this.usInfo.county){\r\n                    this.displayInfo = this.usInfo.state;\r\n                }else {\r\n                    this.displayInfo = this.usInfo.county;\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            if(this.currentCountry === \"US\")\r\n                this.getUSLocationData()\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .displayInfo > span{\r\n        color: darkred;\r\n        padding: 0 5px;\r\n        font-weight: bolder;\r\n    }\r\n</style>"],"sourceRoot":"src/components"}]}