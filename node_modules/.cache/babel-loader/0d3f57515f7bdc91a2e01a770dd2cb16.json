{"remainingRequest":"C:\\Users\\allys\\Documents\\GIT\\Painel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\allys\\Documents\\GIT\\Painel\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\allys\\Documents\\GIT\\Painel\\src\\js\\locationUtils.js","dependencies":[{"path":"C:\\Users\\allys\\Documents\\GIT\\Painel\\src\\js\\locationUtils.js","mtime":1590605624652},{"path":"C:\\Users\\allys\\Documents\\GIT\\Painel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\Painel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\Painel\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/allys/Documents/GIT/Painel/src/js/locationUtils.js"],"names":["worldmapData","ukmapData","usmapData","moment","require","parseLocationData","areaData","locationJSON","JSON","parse","replace","filterNumber","place","number","toString","includes","location","trim","parseInt","forEach","getD3Data","dailyLocationJson","dataTypeKey","locationData","lastDailyData","dailyData","dailyLocationData","dailySum","arr","obj","name","value","isNaN","day","date","lastValue","lastLocationData","find","push","concat","getRegionHistoryTableData","allHistory","todayArr","history","area","data","format","window","dateFormat","todayDate","length","today","combineAllCountryData","globalData","combineProvince","filteredLocations","addedCountryCodes","confirmed","locations","region","confirmedArr","Object","entries","query","ele","country","province","deathArr","deaths","curedArr","recovered","country_code","main","key","death","cured","console","log","getGlobalHistoryTableData","hideCountryName","dateMap","dayData","active","dRate","cRate","checkAllZero","allZeroChecker","total","num","entry","reduce","getAllCountries","map","e","Set","getCountryData","countryName","countryData","latest","countryFilter","filter","getCountryHistoryData","historyKeys","keys","historyData","dateKey","idx","dateEntry","shift","getCountryCompareData","minCases","combineUKHighCharts","currentUkAreaData","commonLocationsData","names","features","properties","jeffArea","index","indexOf","combineUSHighCharts","currentUSAreaData","fips","Number","regionFip","combineWorldHighCharts","currentWorldAreaData","codeMap","Map","nameMap","allMap","set","locationsData","country_key","individual_sum","has","get","current_key","getUSRegionData","usStates","csv","fromString","statesJson","dateJson","state","cases","getSmallerDate","mainDate","largestDate","yearDateFormat","currentMoment","isAfter","isDateValid","smallestDate","isBetween"],"mappings":"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","sourcesContent":["// filter for d3 data,\r\n// written by @henryz00 on Apr 2020\r\n\r\nimport { worldmapData } from \"./worldmap\";\r\nimport { ukmapData } from \"./ukmap\";\r\nimport { usmapData } from \"./usmap\";\r\n\r\nconst moment = require('moment');\r\n\r\nexport function parseLocationData(areaData) {\r\n    if (!areaData) return null;\r\n    let locationJSON = JSON.parse(areaData.replace(/\\\\/g, \"\"));\r\n\r\n    let filterNumber = place => {\r\n        if (place.number != null) {\r\n            if (place.number.toString().includes(','))\r\n                place.number = place.number.replace(/,/g, '');\r\n            place.location = place.location.trim();\r\n            place.number = parseInt(place.number.toString().trim());\r\n        }\r\n    };\r\n    locationJSON.forEach(filterNumber);\r\n    return locationJSON;\r\n}\r\n\r\nexport function getD3Data(dailyLocationJson, dataTypeKey) {\r\n    // dailyLocationJson: { arr: [{location: String, number：Int},...], date: String(window.dateFormat)}\r\n\r\n    let locationData = [];\r\n    let lastDailyData = null;\r\n    for (let dailyData of dailyLocationJson) {\r\n        let dailyLocationData = [];\r\n        let dailySum = 0;\r\n        for (let location of dailyData.arr) {\r\n            let obj = {};\r\n            obj.name = location.location;\r\n            obj.value = (!location[dataTypeKey] || isNaN(location[dataTypeKey])) ? 0 : location[dataTypeKey];\r\n            obj.day = dailyData.date;\r\n            obj.lastValue = 0;\r\n            dailySum += obj.value;\r\n            if (lastDailyData) {\r\n                let lastLocationData = lastDailyData.arr.find(obj => { return obj.location === location.location });\r\n                obj.lastValue = lastLocationData && lastLocationData[dataTypeKey] ? lastLocationData[dataTypeKey] : 0;\r\n            }\r\n            dailyLocationData.push(obj)\r\n        }\r\n        lastDailyData = dailyData;\r\n        if (dailySum > 0)\r\n            locationData = locationData.concat(dailyLocationData);\r\n    }\r\n    // console.log(locationData)\r\n    return locationData;\r\n}\r\n\r\nexport function getRegionHistoryTableData(allHistory, todayArr) {\r\n    let dailyLocationJson = [];\r\n    for (let history of allHistory) {\r\n        if (history.area) {\r\n            let data = {};\r\n            data.arr = parseLocationData(history.area);\r\n            data.date = moment(history.date).format(window.dateFormat);\r\n            dailyLocationJson.push(data);\r\n        }\r\n    }\r\n\r\n    // add current data\r\n    let todayDate = moment().format(window.dateFormat);\r\n    if (dailyLocationJson[dailyLocationJson.length - 1].date != todayDate) {\r\n        let today = { arr: todayArr, date: todayDate };\r\n        dailyLocationJson.push(today);\r\n    }\r\n\r\n    // console.log(\"uk daily location json\", dailyLocationJson);\r\n    return dailyLocationJson;\r\n}\r\n\r\nfunction combineAllCountryData(globalData, combineProvince) {\r\n    let filteredLocations = [];\r\n    let addedCountryCodes = {};\r\n    for (let region of globalData.confirmed.locations) {\r\n        let confirmedArr = Object.entries(region.history);\r\n        let query = (ele) => { return ele.country === region.country && ele.province === region.province };\r\n        let deathArr = globalData.deaths.locations.find(query)?.history;\r\n        let curedArr = globalData.recovered.locations.find(query)?.history;\r\n        if (combineProvince && addedCountryCodes[region.country_code]) {\r\n            let main = filteredLocations[filteredLocations.length - 1];\r\n            for (let [key, value] of confirmedArr) {\r\n                main.confirmed[key] = main.confirmed[key] + value;\r\n                main.death[key] = main.death[key] + deathArr[key];\r\n                main.cured[key] = main.cured[key] + (curedArr ? curedArr[key] : 0);\r\n            }\r\n        } else {\r\n            addedCountryCodes[region.country_code] = true;\r\n            let main = { country: region.country, country_code: region.country_code, confirmed: {}, death: {}, cured: {} };\r\n            if (!combineProvince)\r\n                main.province = region.province;\r\n            for (let [key, value] of confirmedArr) {\r\n                main.confirmed[key] = value;\r\n                main.death[key] = deathArr[key];\r\n                main.cured[key] = (curedArr ? curedArr[key] : 0);\r\n            }\r\n            filteredLocations.push(main)\r\n        }\r\n    }\r\n    console.log(\"combined results\", filteredLocations);\r\n    return filteredLocations;\r\n}\r\n\r\nexport function getGlobalHistoryTableData(globalData, hideCountryName, combineProvince) {\r\n    let locations = combineAllCountryData(globalData, combineProvince);\r\n    let dateMap = {};\r\n    for (let dayData of locations) {\r\n        let confirmedArr = Object.entries(dayData.confirmed);\r\n        for (let [key, value] of confirmedArr) {\r\n            let date = moment(key).format(window.dateFormat);\r\n            let name = hideCountryName && dayData[\"province\"] ? dayData[\"province\"] : (dayData[\"country\"] + (dayData[\"province\"] ? (\" - \" + dayData[\"province\"]) : \"\"));\r\n            let location = combineProvince ? { location: name, country_code: dayData[\"country_code\"], country: dayData[\"country\"] } : { location: name };\r\n            location.confirmed = value;\r\n            location.death = dayData.death[key];\r\n            location.cured = dayData.cured[key];\r\n            location.active = location.confirmed - location.cured - location.death;\r\n            location.dRate = location.confirmed > 0 ? ((location.death / location.confirmed) * 100) : 0;\r\n            location.cRate = location.confirmed > 0 ? ((location.cured / location.confirmed) * 100) : 0;\r\n            dateMap[date] = dateMap[date] ? dateMap[date] : [];\r\n            dateMap[date].push(location)\r\n        }\r\n    }\r\n    // console.log(dateMap);\r\n    let dailyLocationJson = [];\r\n    let checkAllZero = true;\r\n    let allZeroChecker = (total, num) => { return total + num.confirmed };\r\n    for (let entry of Object.entries(dateMap)) {\r\n        if (checkAllZero) {\r\n            if (entry[1].reduce(allZeroChecker, 0) === 0) {\r\n                continue;\r\n            } else {\r\n                checkAllZero = false;\r\n            }\r\n        }\r\n        dailyLocationJson.push({ arr: entry[1], date: entry[0] })\r\n    }\r\n    // console.log(\"global daily location json\", dailyLocationJson);\r\n    return dailyLocationJson;\r\n}\r\n\r\nexport function getAllCountries(locations) {\r\n    let arr = locations.map(e => e.country);\r\n    return new Set(arr);\r\n    //ref https://stackoverflow.com/questions/9229645/remove-duplicate-values-from-js-array\r\n}\r\n\r\nexport function getCountryData(globalData, countryName) {\r\n    // console.log(globalData);\r\n    let countryData = { confirmed: {}, deaths: {}, recovered: {}, latest: {} };\r\n    let countryFilter = countryName == \"world\" ? () => { return true } : e => (e.country == countryName);\r\n    countryData.confirmed.locations = globalData.confirmed.locations.filter(countryFilter);\r\n    countryData.deaths.locations = globalData.deaths.locations.filter(countryFilter);\r\n    countryData.recovered.locations = globalData.recovered.locations.filter(countryFilter);\r\n    // console.log(\"country data\",countryData);\r\n    return countryData;\r\n}\r\n\r\nexport function getCountryHistoryData(countryData) {\r\n\r\n    let historyKeys = Object.keys(countryData.confirmed.locations[0].history);\r\n    let historyData = [];\r\n    //create empty history data\r\n    for (let dateKey of historyKeys) {\r\n        let entry = {\r\n            confirmed: 0,\r\n            cured: 0,\r\n            death: 0,\r\n            date: dateKey\r\n        };\r\n        historyData.push(entry);\r\n    }\r\n\r\n    for (let idx in countryData.confirmed.locations) {\r\n        for (let dateKey of historyKeys) {\r\n            let confirmed = countryData.confirmed.locations[idx].history[dateKey];\r\n            let deaths = countryData.deaths.locations[idx].history[dateKey];\r\n            let recovered = countryData.recovered.locations[idx] ? countryData.recovered.locations[idx].history[dateKey] : 0;\r\n            let dateEntry = historyData.find(e => e.date === dateKey);\r\n            dateEntry.confirmed += confirmed;\r\n            dateEntry.death += deaths;\r\n            dateEntry.cured += recovered ? recovered : 0;\r\n        }\r\n    }\r\n\r\n    while (historyData[0] && historyData[0].confirmed === 0) {\r\n        historyData.shift();\r\n    }\r\n\r\n    // console.log(\"country history data\", historyData);\r\n    return historyData;\r\n}\r\n\r\nexport function getCountryCompareData(globalData, countryName, minCases) {\r\n    let historyData = getCountryHistoryData(getCountryData(globalData, countryName));\r\n    while (historyData[0] && historyData[0].confirmed <= minCases) {\r\n        historyData.shift();\r\n    }\r\n    return historyData;\r\n\r\n}\r\n\r\n/* --------------------------------------------------------------------------------------- */\r\n// by davies xue\r\n\r\nexport function combineUKHighCharts(currentUkAreaData) {\r\n    let commonLocationsData = [];\r\n    let names = [];\r\n    let keys = [];\r\n    for (let region of ukmapData.features) {\r\n        names.push(region.properties.name);\r\n        keys.push(region.properties[\"hc-key\"]);\r\n    }\r\n    // console.log(keys);\r\n\r\n    for (let jeffArea of currentUkAreaData) {\r\n        if (names.includes(jeffArea.location)) {\r\n            const index = names.indexOf(jeffArea.location);\r\n            if (index > -1)\r\n                //names.splice(i1, 1);\r\n                commonLocationsData.push([keys[index], jeffArea.number]);\r\n        }\r\n    }\r\n    // console.log(this.commonLocationsData);\r\n\r\n    return commonLocationsData;\r\n}\r\n\r\nexport function combineUSHighCharts(currentUSAreaData, dataTypeKey) {\r\n    let commonLocationsData = [];\r\n    let fips = [];\r\n    let keys = [];\r\n    for (let region of usmapData.features) {\r\n        fips.push(Number(region.properties[\"state-fips\"]));\r\n        keys.push(region.properties[\"hc-key\"]);\r\n    }\r\n\r\n    for (let region of currentUSAreaData) {\r\n        let regionFip = Number(region.fips);\r\n        if (fips.includes(regionFip)) {\r\n            const index = fips.indexOf(regionFip);\r\n            if (index > -1)\r\n                commonLocationsData.push([keys[index], Number(region[dataTypeKey])]);\r\n        }\r\n    }\r\n    // console.log(\"US MAP\", commonLocationsData);\r\n\r\n    return commonLocationsData;\r\n}\r\n\r\n\r\nexport function combineWorldHighCharts(currentWorldAreaData, dataTypeKey) {\r\n    let codeMap = new Map();\r\n    let nameMap = new Map();\r\n    let allMap = new Map();\r\n    for (let region of worldmapData.features) {\r\n        nameMap.set(region.properties.name, region.properties[\"hc-key\"]);\r\n        codeMap.set(region.properties[\"hc-a2\"], region.properties[\"hc-key\"]);\r\n    }\r\n    // console.log(\"MAP\",codeMap, nameMap)\r\n    let locationsData = [];\r\n    let country_key = \"\";\r\n    let individual_sum = 0;\r\n    for (let area of currentWorldAreaData) {\r\n        if (nameMap.has(area.country) || codeMap.has(area.country_code)) {\r\n            // Country\r\n            if (individual_sum > 0) {\r\n                if (allMap.has(country_key))\r\n                    allMap.set(country_key, allMap.get(country_key) + individual_sum);\r\n                else\r\n                    allMap.set(country_key, individual_sum);\r\n                individual_sum = 0;\r\n            }\r\n            let current_key = codeMap.get(area.country_code);\r\n            if (allMap.has(current_key))\r\n                allMap.set(current_key, area[dataTypeKey] + allMap.get(current_key));\r\n            else\r\n                allMap.set(current_key, area[dataTypeKey]);\r\n        }\r\n    }\r\n\r\n    for (let entry of allMap)\r\n        locationsData.push(entry);\r\n    // console.log(allMap, locationsData);\r\n    return locationsData;\r\n}\r\n\r\n\r\nexport async function getUSRegionData(usStates) {\r\n    const csv = require('csvtojson');\r\n    let statesJson = await csv().fromString(usStates);\r\n\r\n    let dateJson = {};\r\n    for (let entry of statesJson) {\r\n        let dateKey = moment(entry.date).format(window.dateFormat);\r\n        if (!dateJson[dateKey]) dateJson[dateKey] = [];\r\n        let location = { location: entry.state, fips: entry.fips };\r\n        location.confirmed = entry.cases;\r\n        location.death = entry.deaths;\r\n        location.cured = 0;\r\n        location.active = location.confirmed - location.death;\r\n        location.dRate = location.confirmed > 0 ? ((location.death / location.confirmed) * 100) : 0;\r\n        location.cRate = 0;\r\n        dateJson[dateKey].push(location)\r\n    }\r\n\r\n    let dailyLocationJson = [];\r\n    for (let [key, value] of Object.entries(dateJson)) {\r\n        let dayData = { arr: value, date: key };\r\n        dailyLocationJson.push(dayData)\r\n    }\r\n    console.log(\"us daily location json\", dailyLocationJson);\r\n    return dailyLocationJson;\r\n}\r\n\r\nexport function getSmallerDate(mainDate, largestDate) {\r\n    const yearDateFormat = window.dateFormat + ' YYYY';\r\n    let currentMoment = moment(mainDate+' 2020', yearDateFormat);\r\n    if(currentMoment.isAfter(moment(largestDate+' 2020', yearDateFormat))){\r\n        return largestDate;\r\n    }else{\r\n        return mainDate;\r\n    }\r\n}\r\n\r\nexport function isDateValid(mainDate, smallestDate, largestDate) {\r\n    const yearDateFormat = window.dateFormat + ' YYYY';\r\n    let currentMoment = moment(mainDate+' 2020', yearDateFormat);\r\n    return (currentMoment.isBetween(moment(smallestDate+' 2020', yearDateFormat),\r\n        moment(largestDate+' 2020', yearDateFormat), null, '[]'))\r\n}"]}]}