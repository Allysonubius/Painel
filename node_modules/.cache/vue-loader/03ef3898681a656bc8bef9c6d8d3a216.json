{"remainingRequest":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\src\\components\\BarRace.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\src\\components\\BarRace.vue","mtime":1590605624602},{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\PaineCovid19\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5iYXJfcmFjZSB0ZXh0ewogICAgZm9udC1zaXplOiAxNnB4OwogICAgZm9udC1mYW1pbHk6IE9wZW4gU2Fucywgc2Fucy1zZXJpZjsKfQouYmFyX3JhY2UgdGV4dC50aXRsZXsKICAgIGZvbnQtc2l6ZTogMjRweDsKICAgIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KLmJhcl9yYWNlIHRleHQuc3ViVGl0bGV7CiAgICBmb250LXdlaWdodDogNTAwOwogICAgZmlsbDogIzc3Nzc3NzsKfQouYmFyX3JhY2UgdGV4dC50b3RhbFRleHR7CiAgICBmb250LXNpemU6IDIzcHg7CiAgICBmb250LXdlaWdodDogYm9sZDsKICAgIGZpbGw6ICMzZDNkM2Q7Cn0KLmJhcl9yYWNlIHRleHQuY2FwdGlvbnsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBmaWxsOiAjNzc3Nzc3Owp9Ci5iYXJfcmFjZSB0ZXh0LmxhYmVsewogICAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7CiAgICBmb250LXdlaWdodDogNjAwOwp9CgouYmFyX3JhY2UgdGV4dC52YWx1ZUxhYmVsewogICAgZm9udC13ZWlnaHQ6IDMwMDsKfQoKLmJhcl9yYWNlIHRleHQuZGF5VGV4dHsKICAgIGZvbnQtc2l6ZTogNjRweDsKICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICBvcGFjaXR5OiAwLjI1Owp9CmRheVRleHR7CiAgICBmb250LXNpemU6IDgwcHggIWltcG9ydGFudDsKICAgIGZvbnQtd2VpZ2h0OiA3MDA7CiAgICBvcGFjaXR5OiAwLjI1Owp9Ci50aWNrIHRleHQgewogICAgZmlsbDogIzc3Nzc3NzsKfQoueEF4aXMgLnRpY2s6bnRoLWNoaWxkKDIpIHRleHQgewogICAgdGV4dC1hbmNob3I6IHN0YXJ0Owp9Ci50aWNrIGxpbmUgewogICAgc2hhcGUtcmVuZGVyaW5nOiBDcmlzcEVkZ2VzOwogICAgc3Ryb2tlOiAjZGRkZGRkOwp9Ci50aWNrIGxpbmUub3JpZ2luewogICAgc3Ryb2tlOiAjYWFhYWFhOwp9CnBhdGguZG9tYWluewogICAgZGlzcGxheTogbm9uZTsKfQo="},{"version":3,"sources":["BarRace.vue"],"names":[],"mappingsfile":"BarRace.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div ref=\"parent\">\r\n        <div class=\"bar_race\" id=\"barRace\"></div>\r\n        <SlideController :start-date=\"startDate\" :end-date=\"endDate\" :current-date=\"day\" @change=\"changeDate\" @playPause=\"playing = $event\"></SlideController>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    /* eslint-disable */\r\n    import SlideController from './SlideController'\r\n    import {isDateValid} from '../js/locationUtils'\r\n    export default {\r\n        name: \"BarRace\",\r\n        components: {\r\n            SlideController\r\n        },\r\n        props: {\r\n            raceData: Array,\r\n            title: String,\r\n            subtitle: String,\r\n            source: String,\r\n            id:String,\r\n            changeLabelPosition: Boolean,\r\n            isRate: Boolean,\r\n            color: String,\r\n            mainDate: String\r\n        },\r\n        data:function () {\r\n            return {\r\n                width:500,\r\n                day:\"\",\r\n                playing: true,\r\n                startDate: \"\",\r\n                endDate: \"\",\r\n            }\r\n        },\r\n        created() {\r\n            // window.addEventListener(\"resize\", this.resizeEventHandler);\r\n        },\r\n        destroyed() {\r\n            // console.log(\"destoryed\");\r\n            // window.removeEventListener(\"resize\", this.resizeEventHandler);\r\n        },\r\n        methods: {\r\n            resizeEventHandler() {\r\n                if(this.$refs.parent){\r\n                    this.width = this.$refs.parent.clientWidth;\r\n                }\r\n                // this.width = window.innerWidth>510?510: window.innerWidth-55;\r\n                // console.log(this.width)\r\n            },\r\n            changeDate(e){\r\n                this.day = e;\r\n                this.emitDateChange(e)\r\n            },\r\n            emitDateChange(e){\r\n                this.$emit('dateChange', e)\r\n            }\r\n        },\r\n        mounted() {\r\n            const moment = require('moment');\r\n            this.resizeEventHandler();\r\n            this.startDate = this.raceData[0].day;\r\n            this.endDate = this.raceData[this.raceData.length-1].day;\r\n            const d3 = require('d3');\r\n            //ref https://gist.github.com/jrzief/70f1f8a5d066a286da3a1e699823470f NEED REFACTOR THO, no time yet\r\n            // Feel free to change or delete any of the code you see in this editor!\r\n            let svg = d3.select(\"#barRace\").append(\"svg\")\r\n                .attr(\"width\", this.width)\r\n                .attr(\"height\", 500);\r\n\r\n            let tickDuration = 1000;\r\n\r\n            let top_n = 12;\r\n            let height = 500;\r\n            let width = this.width;\r\n\r\n            const margin = {\r\n                top: 30,\r\n                right: 0,\r\n                bottom: 5,\r\n                left: 0\r\n            };\r\n\r\n            let barPadding = (height-(margin.bottom+margin.top))/(top_n*5);\r\n\r\n            // let title = svg.append('text')\r\n            //     .attr('class', 'title')\r\n            //     .attr('y', 24)\r\n            //     .html(this.title);\r\n            //\r\n            // let subTitle = svg.append(\"text\")\r\n            //     .attr(\"class\", \"subTitle\")\r\n            //     .attr(\"y\", 55)\r\n            //     .html(this.subtitle);\r\n\r\n            let caption = svg.append('text')\r\n                .attr('class', 'caption')\r\n                .attr('x', width)\r\n                .attr('y', height-5)\r\n                .style('text-anchor', 'end')\r\n                .html(\"©covid19track.site | Data ©JHU\");\r\n\r\n            this.day =  this.mainDate && isDateValid(this.mainDate, this.raceData[0].day, this.raceData[this.raceData.length-1].day ) ? this.mainDate :  this.raceData[0].day;\r\n\r\n            let totalString = this.$t('total');\r\n            let that = this;\r\n\r\n            function loadData(data) {\r\n                //if (error) throw error;\r\n\r\n                // console.log(data);\r\n\r\n                data.forEach(d => {\r\n                    d.value = +d.value,\r\n                        d.lastValue = d.lastValue<0? 0: +d.lastValue,\r\n                        d.value = isNaN(d.value) && d.value < 0 ? 0 : d.value,\r\n                        d.colour = that.color?that.color:\"#33CCFF\"\r\n                });\r\n\r\n                // console.log(data);\r\n\r\n                let daySlice = data.filter(d => d.day == that.day && !isNaN(d.value))\r\n                    .sort((a,b) => b.value - a.value)\r\n                    .slice(0, top_n);\r\n\r\n                daySlice.forEach((d,i) => d.rank = i);\r\n\r\n                // console.log('daySlice: ', daySlice)\r\n\r\n\r\n                const getClassName = (d)=>\"bar_\"+d.name.replace(/[^\\w]/g, \"_\");\r\n\r\n                const isTooSmall = (d)=>{\r\n                    let theBar = d3.select(`.${getClassName(d)}`);\r\n                    return theBar?.node()?.getBoundingClientRect().width < 100\r\n                };\r\n                const getOutsideWidth = (d) => x(d.value)+15+(d.value.toFixed(0)).length*10;\r\n\r\n                const getLabelX = (d)=>that.changeLabelPosition && isTooSmall(d)?getOutsideWidth(d): x(d.value)-8;\r\n                const getLabelAnchor = (d)=>that.changeLabelPosition && isTooSmall(d)?'start':'end';\r\n\r\n\r\n\r\n                let x = d3.scaleLinear()\r\n                    .domain([0, d3.max(daySlice, d => d.value)])\r\n                    .range([margin.left, width-margin.right-65]);\r\n\r\n                let y = d3.scaleLinear()\r\n                    .domain([top_n, 0])\r\n                    .range([height-margin.bottom, margin.top]);\r\n\r\n                let xAxis = d3.axisTop()\r\n                    .scale(x)\r\n                    .ticks(width > 500 ? 5:2)\r\n                    .tickSize(-(height-margin.top-margin.bottom))\r\n                    .tickFormat(d => d3.format(',')(d));\r\n\r\n                svg.append('g')\r\n                    .attr('class', 'axis xAxis')\r\n                    .attr('transform', `translate(0, ${margin.top})`)\r\n                    .call(xAxis)\r\n                    .selectAll('.tick line')\r\n                    .classed('origin', d => d == 0);\r\n\r\n                svg.selectAll('rect.bar')\r\n                    .data(daySlice, d => d.name)\r\n                    .enter()\r\n                    .append('rect')\r\n                    .attr('class', d =>  `bar ${getClassName(d)}`)\r\n                    .attr('x', x(0)+1)\r\n                    .attr('width', d => (x(d.value)-x(0)-1)<0?0:(x(d.value)-x(0)-1))\r\n                    .attr('y', d => y(d.rank)+5)\r\n                    .attr('height', y(1)-y(0)-barPadding)\r\n                    .style('fill', d => d.colour);\r\n\r\n                svg.selectAll('text.label')\r\n                    .data(daySlice, d => d.name)\r\n                    .enter()\r\n                    .append('text')\r\n                    .attr('class', 'label')\r\n                    .attr('x', d => getLabelX(d))\r\n                    .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\r\n                    .style('text-anchor',d =>  getLabelAnchor(d))\r\n                    .style('color', 'white')\r\n                    .html(d => d.name);\r\n\r\n                svg.selectAll('text.valueLabel')\r\n                    .data(daySlice, d => d.name)\r\n                    .enter()\r\n                    .append('text')\r\n                    .attr('class', 'valueLabel')\r\n                    .attr('x', d => x(d.value)+5)\r\n                    .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\r\n                    .text(d => d3.format(',.0f')(d.lastValue));\r\n\r\n                let dayText = svg.append('text')\r\n                    .attr('class', 'dayText')\r\n                    .attr('x', width-margin.right)\r\n                    .attr('y', height-60)\r\n                    .style('text-anchor', 'end')\r\n                    .html(that.day);\r\n                    // .call(halo, 10);\r\n\r\n                let totalText = svg.append('text')\r\n                    .attr('class', 'totalText')\r\n                    .attr('x', width-margin.right)\r\n                    .attr('y', height-30)\r\n                    .style('text-anchor', 'end')\r\n                    .html(totalString + \" - 0\");\r\n\r\n                let total = 0;\r\n\r\n                let ticker = d3.interval(e => {\r\n                    if(!that.playing) return;\r\n                    that.resizeEventHandler();\r\n\r\n                    daySlice = data.filter(d => d.day == that.day && !isNaN(d.value))\r\n                        .sort((a,b) => b.value - a.value);\r\n\r\n                    total = daySlice.reduce((accumulator, currentValue) => accumulator + currentValue.value, 0);\r\n\r\n                    if(that.isRate){\r\n                        totalText.text(d => \"Data Average - \" + d3.format(',.2f')(total/daySlice.length)+\"%\");\r\n                    }else {\r\n                        totalText.text(d => totalString + \" - \" + d3.format(',.0f')(total));\r\n                    }\r\n\r\n                    daySlice = daySlice.slice(0,top_n);\r\n\r\n                    daySlice.forEach((d,i) => d.rank = i);\r\n\r\n                    // console.log('Intervalday: ', daySlice);\r\n\r\n                    x.domain([0, d3.max(daySlice, d => d.value)]);\r\n\r\n                    svg.select('.xAxis')\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .call(xAxis);\r\n\r\n                    let bars = svg.selectAll('.bar').data(daySlice, d => d.name);\r\n\r\n                    bars\r\n                        .enter()\r\n                        .append('rect')\r\n                        .attr('class', d => `bar ${getClassName(d)}`)\r\n                        .attr('x', x(0)+1)\r\n                        .attr( 'width', d => (x(d.value)-x(0)-1)<0?0:(x(d.value)-x(0)-1))\r\n                        .attr('y', d => y(top_n+1)+5)\r\n                        .attr('height', y(1)-y(0)-barPadding)\r\n                        .style('fill', d => d.colour)\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('y', d => y(d.rank)+5);\r\n\r\n                    bars\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('width', d => (x(d.value)-x(0)-1)<0?0:(x(d.value)-x(0)-1))\r\n                        .attr('y', d => y(d.rank)+5);\r\n\r\n                    bars\r\n                        .exit()\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('width', d => (x(d.value)-x(0)-1)<0?0:(x(d.value)-x(0)-1))\r\n                        .attr('y', d => y(top_n+1)+5)\r\n                        .remove();\r\n\r\n                    let labels = svg.selectAll('.label')\r\n                        .data(daySlice, d => d.name);\r\n\r\n\r\n\r\n                    labels\r\n                        .enter()\r\n                        .append('text')\r\n                        .attr('class', 'label')\r\n                        .attr('x', d => getLabelX(d))\r\n                        .attr('y', d => y(top_n+1)+5+((y(1)-y(0))/2))\r\n                        .style('text-anchor',  d => getLabelAnchor(d))\r\n                        .style('color', 'white')\r\n                        .html(d => d.name)\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1);\r\n\r\n\r\n                    labels\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('x', d => getLabelX(d))\r\n                        .style('text-anchor',  d => getLabelAnchor(d))\r\n                        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1);\r\n\r\n                    labels\r\n                        .exit()\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('x', d => getLabelX(d))\r\n                        .style('text-anchor',  d => getLabelAnchor(d))\r\n                        .attr('y', d => y(top_n+1)+5)\r\n                        .remove();\r\n\r\n\r\n\r\n                    let valueLabels = svg.selectAll('.valueLabel').data(daySlice, d => d.name);\r\n\r\n                    valueLabels\r\n                        .enter()\r\n                        .append('text')\r\n                        .attr('class', 'valueLabel')\r\n                        .attr('x', d => x(d.value)+5)\r\n                        .attr('y', d => y(top_n+1)+5)\r\n                        .text(d => d3.format(',.0f')(d.lastValue))\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1);\r\n\r\n                    valueLabels\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('x', d => x(d.value)+5)\r\n                        .attr('y', d => y(d.rank)+5+((y(1)-y(0))/2)+1)\r\n                        .tween(\"text\", function(d) {\r\n                            let i = d3.interpolateRound(d.lastValue, d.value);\r\n                            return function(t) {\r\n                                this.textContent = d3.format(',')(i(t));\r\n                            };\r\n                        });\r\n\r\n\r\n                    valueLabels\r\n                        .exit()\r\n                        .transition()\r\n                        .duration(tickDuration)\r\n                        .ease(d3.easeLinear)\r\n                        .attr('x', d => x(d.value)+5)\r\n                        .attr('y', d => y(top_n+1)+5)\r\n                        .remove();\r\n\r\n                    dayText.html(that.day);\r\n                    that.emitDateChange(that.day);\r\n\r\n                    let currentMoment = moment(that.day+' 2020', window.dateFormat + ' YYYY');\r\n                    let endMoment = moment(data[data.length-1].day+' 2020', window.dateFormat + ' YYYY');\r\n                    // day = d3.format('.1f')((+day) + 0.1);\r\n                    that.day = currentMoment.add(1, 'days').format(window.dateFormat);\r\n                    if(currentMoment.isAfter(endMoment)) that.day= data[0].day;\r\n                    // console.log(day)\r\n                    // console.log(day)\r\n                },tickDuration);\r\n\r\n            }\r\n            loadData(this.raceData);\r\n\r\n\r\n            // const halo = function(text, strokeWidth) {\r\n            //     text.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this); })\r\n            //         .style('fill', '#ffffff')\r\n            //         .style( 'stroke','#ffffff')\r\n            //         .style('stroke-width', strokeWidth)\r\n            //         .style('stroke-linejoin', 'round')\r\n            //         .style('opacity', 1);\r\n            //\r\n            // }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .bar_race text{\r\n        font-size: 16px;\r\n        font-family: Open Sans, sans-serif;\r\n    }\r\n    .bar_race text.title{\r\n        font-size: 24px;\r\n        font-weight: 500;\r\n    }\r\n    .bar_race text.subTitle{\r\n        font-weight: 500;\r\n        fill: #777777;\r\n    }\r\n    .bar_race text.totalText{\r\n        font-size: 23px;\r\n        font-weight: bold;\r\n        fill: #3d3d3d;\r\n    }\r\n    .bar_race text.caption{\r\n        font-weight: 400;\r\n        font-size: 14px;\r\n        fill: #777777;\r\n    }\r\n    .bar_race text.label{\r\n        color: white !important;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .bar_race text.valueLabel{\r\n        font-weight: 300;\r\n    }\r\n\r\n    .bar_race text.dayText{\r\n        font-size: 64px;\r\n        font-weight: 700;\r\n        opacity: 0.25;\r\n    }\r\n    dayText{\r\n        font-size: 80px !important;\r\n        font-weight: 700;\r\n        opacity: 0.25;\r\n    }\r\n    .tick text {\r\n        fill: #777777;\r\n    }\r\n    .xAxis .tick:nth-child(2) text {\r\n        text-anchor: start;\r\n    }\r\n    .tick line {\r\n        shape-rendering: CrispEdges;\r\n        stroke: #dddddd;\r\n    }\r\n    .tick line.origin{\r\n        stroke: #aaaaaa;\r\n    }\r\n    path.domain{\r\n        display: none;\r\n    }\r\n</style>"]}]}