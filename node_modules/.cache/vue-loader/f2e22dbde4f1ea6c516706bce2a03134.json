{"remainingRequest":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\src\\components\\RegionTable.vue?vue&type=template&id=8ea5238c&scoped=true&","dependencies":[{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\src\\components\\RegionTable.vue","mtime":1590605624636},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\allys\\Documents\\GIT\\COVID-19-Timeline-Data-Visualizer\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}